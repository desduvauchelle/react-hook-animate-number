{"version":3,"sources":["../../src/easingFunctions.ts","../../src/index.ts","../../src/useAnimateNumber.tsx","App.js","index.js"],"names":["easing","easeInOutCubic","x","Math","easeOutCirc","easeOutQuint","easeOutExpo","useAnimateNumber","number","durationInMs","decimalPlaces","useState","currentNumber","setCurrentNumber","originalNumber","setOriginalNumber","currentTarget","setCurrentTarget","step","setStep","useEffect","mounted","isGoingUp","numberOfSteps","percentageOfTargetValue","currentValue","parseFloat","setTimeout","isAnimating","App","React","setNumber","duration","setDuration","tempNumber","setTempNumber","tempDuration","setTempDuration","animatedNumber","animateNumber","numberClass","onSubmit","e","preventDefault","style","margin","maxWidth","width","type","value","onChange","target","onClick","random","floor","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.061ecc4c.chunk.js","sourcesContent":["// https://easings.net/#\n\n// x is a value for progress of the animation between 0 and 1\n\nconst easing = {\n\teaseInOutCubic: (x: number): number => {\n\t\tif (x >= 1) return 1\n\t\treturn x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2\n\t},\n\teaseOutCirc: (x: number): number => {\n\t\tif (x >= 1) return 1\n\t\treturn Math.sqrt(1 - Math.pow(x - 1, 2))\n\t},\n\teaseOutQuint: (x: number): number => {\n\t\tif (x >= 1) return 1\n\t\treturn 1 - Math.pow(1 - x, 5)\n\t},\n\teaseOutExpo: (x: number): number => {\n\t\treturn x === 1 ? 1 : 1 - Math.pow(2, -10 * x)\n\t}\n}\n\nexport default easing","import useAnimateNumber from \"./useAnimateNumber\";\nimport easing from \"./easingFunctions\";\n\nexport default {\n\tuseAnimateNumber,\n\teasing\n}","import { useState, useEffect } from 'react'\nimport easing from './easingFunctions'\nconst FPS = 60\n\n\n\ntype UseAnimateType = (props: {\n\tnumber: number,\n\tdurationInMs?: number,\n\tdecimalPlaces?: number\n}) => { number: number, isAnimating: boolean, isGoingUp: boolean }\n\nconst useAnimateNumber: UseAnimateType =\n\t({\n\t\tnumber = 0,\n\t\tdurationInMs = 4000,\n\t\tdecimalPlaces = 0\n\t}) => {\n\t\tconst [currentNumber, setCurrentNumber] = useState(0)\n\t\tconst [originalNumber, setOriginalNumber] = useState(0)\n\t\tconst [currentTarget, setCurrentTarget] = useState(0)\n\t\tconst [step, setStep] = useState(0)\n\n\n\t\tuseEffect(() => {\n\t\t\tif (number === originalNumber) return\n\t\t\tlet mounted = true\n\n\t\t\t// Check if it's already in the middle of an animation\n\t\t\tif (step > 0 && currentTarget !== number) {\n\t\t\t\tsetOriginalNumber(currentNumber)\n\t\t\t\tsetStep(0)\n\t\t\t}\n\n\t\t\tlet isGoingUp = number > originalNumber\n\n\t\t\tconst numberOfSteps = Math.round(1000 / FPS * durationInMs / 1000)\n\n\t\t\tconst progress = (step + 1) / numberOfSteps\n\t\t\tconst percentageOfTargetValue = easing.easeOutExpo(progress)\n\t\t\tlet currentValue = percentageOfTargetValue * number\n\t\t\tif (!isGoingUp) {\n\t\t\t\tcurrentValue = (1 - percentageOfTargetValue) * originalNumber + number\n\t\t\t}\n\t\t\tif(currentValue !== 0){\n\t\t\t\tcurrentValue = parseFloat(currentValue.toFixed(decimalPlaces))\n\t\t\t}\n\t\t\tif (isGoingUp && currentValue > number) {\n\t\t\t\tcurrentValue = number\n\t\t\t}\n\t\t\tif (!isGoingUp && currentValue < number) {\n\t\t\t\tcurrentValue = number\n\t\t\t}\n\t\t\t// console.log(`From ${originalNumber} to ${currentTarget}. Currently: ${currentValue} ${isGoingUp? `UP⬆️`: `DOWN⬇️`}`)\n\n\t\t\tif (step === numberOfSteps || currentValue === number) {\n\t\t\t\tsetOriginalNumber(number)\n\t\t\t\tsetCurrentNumber(number)\n\t\t\t\tsetStep(0)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif(mounted){\n\t\t\t\t\tsetCurrentTarget(number)\n\t\t\t\t\tsetStep(step + 1)\n\t\t\t\t\tsetCurrentNumber(currentValue)\n\t\t\t\t}\n\t\t\t}, 1000 / FPS)\n\n\t\t\treturn () => {\n\t\t\t\tmounted = false\n\t\t\t}\n\t\t}, [number, originalNumber, currentNumber, step])\n\n\t\treturn {\n\t\t\tnumber: currentNumber,\n\t\t\tisGoingUp: number > originalNumber,\n\t\t\tisAnimating: number !== originalNumber\n\t\t}\n\t}\n\nexport default useAnimateNumber","import React from 'react'\n\nimport animateNumber from 'react-hook-animate-number'\nconst App = () => {\n\tconst [number, setNumber] = React.useState(382)\n\tconst [duration, setDuration] = React.useState(4000)\n\tconst [tempNumber, setTempNumber] = React.useState(382)\n\tconst [tempDuration, setTempDuration] = React.useState(4000)\n\tconst animatedNumber = animateNumber.useAnimateNumber({ number: number, durationInMs: duration })\n\n\tconst onSubmit = (e) => {\n\t\te.preventDefault()\n\t\tsetNumber(tempNumber)\n\t\tsetDuration(tempDuration)\n\t}\n\n\tconst randomNumber = () => {\n\t\tconst random = Math.floor(Math.random() * 1000) + 1\n\t\tsetTempNumber(random)\n\t\tsetNumber(random)\n\t}\n\n\tlet numberClass = `number-box`\n\tif (animatedNumber.isAnimating) {\n\t\tif (animatedNumber.isGoingUp) {\n\t\t\tnumberClass += ` up`\n\t\t}\n\t\tif (!animatedNumber.isGoingUp) {\n\t\t\tnumberClass += ` down`\n\t\t}\n\t}\n\n\treturn <>\n\t\t<h1>Animated number</h1>\n\t\t<form onSubmit={onSubmit}>\n\t\t\t<p>You can change the number it needs to go:</p>\n\t\t\t<div style={{ margin: `0 auto`, maxWidth: 380, width: `auto` }}>\n\t\t\t\t<p><strong>Number:</strong></p>\n\t\t\t\t<input type=\"number\" value={tempNumber} onChange={e => setTempNumber(e.target.value)} />\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\t<p><strong>Animation duration (ms):</strong></p>\n\t\t\t\t<input type=\"number\" value={tempDuration} onChange={e => setTempDuration(e.target.value)} />\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\t<p></p>\n\t\t\t\t<button type=\"submit\">Refresh</button>\n\t\t\t\t<button type=\"submit\" onClick={randomNumber}>Generate randomNumber</button>\n\n\n\t\t\t</div>\n\t\t</form>\n\t\t<br />\n\t\t<div className={numberClass}>\n\t\t\t{animatedNumber.number}\n\t\t</div>\n\t</>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<div className=\"container\">\n\t<App />\n</div>, document.getElementById('root'))\n"],"sourceRoot":""}